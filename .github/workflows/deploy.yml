name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test and Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          client/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd server
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd client
        npm ci
        
    - name: Build backend (if script exists)
      run: |
        cd server
        npm run build || echo "No build script found - skipping"
        
    - name: Build frontend
      run: |
        cd client
        npm run build
        
    - name: Run backend tests
      run: |
        cd server
        npm test || echo "No tests found"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Docker Build Test
      run: |
        # Test individual Docker builds first
        docker build -t highway-delite-backend ./server
        docker build -t highway-delite-frontend ./client
        echo "Individual Docker builds successful"
        
    - name: Docker Compose Test
      run: |
        # Test docker compose (newer syntax)
        docker compose build
        echo "Docker Compose build successful"
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          client/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd server
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd client
        npm ci
        
    - name: Build backend
      run: |
        cd server
        npm run build
        
    - name: Build frontend
      run: |
        cd client
        npm run build
        
    - name: Run backend tests
      run: |
        cd server
        npm test || echo "No tests found"
        
    - name: Docker Build Test
      run: |
        # Test individual Docker builds first
        docker build -t highway-delite-backend ./server
        docker build -t highway-delite-frontend ./client
        echo "Individual Docker builds successful"
        
    - name: Docker Compose Test
      run: |
        # Test docker compose (newer syntax)
        docker compose build
        echo "Docker Compose build successful"
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Deploy to AWS EC2
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment package
      run: |
        # Create a clean deployment package excluding unnecessary files
        tar -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='*.git*' \
          --exclude='node_modules' \
          --exclude='*/node_modules' \
          --exclude='**node_modules' \
          --exclude='.github' \
          --exclude='*.log' \
          --exclude='*.tmp' \
          --exclude='deployment.tar.gz' \
          --exclude='.env*' \
          --exclude='coverage' \
          --exclude='dist' \
          --exclude='build' \
          --warning=no-file-changed \
          .
          
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Create app directory
          sudo mkdir -p /var/www/highway-delite
          sudo chown ubuntu:ubuntu /var/www/highway-delite
          cd /var/www/highway-delite
          
          # Backup current deployment
          if [ -d "current" ]; then
            rm -rf backup
            mv current backup
          fi
          
          # Create new deployment directory
          mkdir -p current
          
    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "deployment.tar.gz"
        target: "/var/www/highway-delite/"
        
    - name: Extract and deploy
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd /var/www/highway-delite
          
          # Extract new deployment
          tar -xzf deployment.tar.gz -C current/
          cd current
          
          # Create production environment file
          cat > .env << EOF
          NODE_ENV=production
          PORT=5000
          MONGODB_URI=mongodb://highway_user:${{ secrets.MONGO_PASSWORD }}@mongodb:27017/highway_delite
          CLIENT_URL=http://${{ secrets.EC2_HOST }}:5173
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          GMAIL_USER=${{ secrets.GMAIL_USER }}
          GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}
          OTP_EXPIRES_IN=${{ secrets.OTP_EXPIRES_IN }}
          MAX_OTP_ATTEMPTS=${{ secrets.MAX_OTP_ATTEMPTS }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=http://${{ secrets.EC2_HOST }}:5000/api/auth/google/callback
          SESSION_SECRET=${{ secrets.SESSION_SECRET }}
          MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
          EOF
          
          # Create frontend environment file
          cat > client/.env << EOF
          VITE_API_URL=http://${{ secrets.EC2_HOST }}:5000/api
          VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          EOF
          
          # Stop existing containers
          docker compose down || true
          
          # Start new deployment
          docker compose up -d --build
          
          # Wait for services to start
          sleep 30
          
          # Health check
          if curl -f http://localhost:5000/ > /dev/null 2>&1; then
            echo "Deployment successful!"
            # Clean up backup
            rm -rf ../backup
          else
            echo "Deployment failed! Rolling back..."
            docker compose down || true
            if [ -d "../backup" ]; then
              cd ../backup
              docker compose up -d
            fi
            exit 1
          fi
          
          # Cleanup
          rm ../deployment.tar.gz
          
    - name: Deployment notification
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          echo "=== Deployment Status ==="
          echo "Time: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Services:"
          docker compose ps
          echo "Health Check:"
          curl -s http://localhost:5000/ | head -1 || echo "Service unavailable"
